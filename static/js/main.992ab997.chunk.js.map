{"version":3,"sources":["constants.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["networkURLs","alcyone","pmf","pme","itn","App","useState","polyWallet","setPolyWallet","proof","setProof","address","setAddress","api","setApi","did","setDid","undefined","uidSet","setUidSet","network","setNetwork","error","setInternalError","ticker","setTicker","uid","setUid","importedUid","setImportedUid","setError","disappear","setTimeout","setDisappearingError","useEffect","_accounts","accounts","filter","account","meta","source","length","console","log","encodeAddress","decodeAddress","Error","Promise","resolve","then","web3Enable","exts","meshExts","ext","name","wallet","subscribe","get","web3AccountsSubscribe","web3Accounts","url","ApiPromise","provider","WsProvider","types","schema","rpc","isReady","query","identity","keyToIdentityIds","linkedKeyInfo","isEmpty","toString","isSet","data","handleChange","event","preventDefault","target","value","handleUidChange","provideUid","a","provide","catch","readUid","read","res","provideUidFromDid","crypto","mockUIdHex","process_create_mocked_investor_uid","uuidStringify","hexToU8a","isDev","Body","onClick","type","onChange","requestProof","generateProof","JSON","stringify","message","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.992ab997.chunk.js","sourcesContent":["export const networkURLs: Record<string, string> = {\n  alcyone: 'wss://alcyone-rpc.polymesh.live',\n  pmf: 'wss://pmf.polymath.network',\n  pme: 'wss://pme.polymath.network',\n  itn: 'wss://itn-rpc.polymesh.live',\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { web3Accounts, web3AccountsSubscribe, web3Enable } from '@polkadot/extension-dapp';\nimport { encodeAddress, decodeAddress } from '@polkadot/util-crypto';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport schema from './polymesh_schema.json';\nimport { hexToU8a } from '@polkadot/util';\nimport { stringify as uuidStringify } from 'uuid';\nimport { networkURLs } from './constants';\nimport { InjectedAccountWithMeta } from '@polkadot/extension-inject/types';\n\nfunction App() {\n  const [polyWallet, setPolyWallet] = useState<any>(null);\n  const [proof, setProof] = useState<string>('');\n  const [address, setAddress] = useState<string>('');\n  const [api, setApi] = useState<ApiPromise | undefined>();\n  const [did, setDid] = useState<string | undefined>();\n  const [uidSet, setUidSet] = useState<boolean | undefined>(undefined);\n  const [network, setNetwork] = useState<string | undefined>();\n  const [error, setInternalError] = useState<Error | undefined>();\n  const [ticker, setTicker] = useState<string>('');\n  const [uid, setUid] = useState<string>('');\n  const [importedUid, setImportedUid] = useState<string>('');\n  \n\n  const setError = (error: Error, disappear: boolean = false) => {\n    setInternalError(error);\n    disappear && setTimeout(() => setInternalError(undefined), 3000);\n  }\n\n  const setDisappearingError = (error: Error) => setError(error, true);\n\n  const reset = () => {\n    setDid(undefined);\n    setProof('');\n    setInternalError(undefined);\n    setTicker('');\n    setUid('');\n    setUidSet(undefined);\n  }\n\n\n  useEffect(() => {\n    const _accounts = (accounts: InjectedAccountWithMeta[]) => {\n      // @TODO Fractal\n      // Filter accounts based on their source.\n      accounts = accounts.filter(account => account.meta.source === 'polywallet');\n      if (accounts && accounts.length) {\n        console.log('__accounts', accounts);\n        // @TODO Fractal\n        // Recode address with ITN prefix (or Alcyone's, according to selected network).\n        const address = encodeAddress(decodeAddress(accounts[0].address), 12);\n        setAddress(address);\n      }\n      else {\n        setError(new Error('No accounts found in wallet extension'));\n        return;\n      }\n    }\n\n    \n    if (!polyWallet) {\n      (new Promise((resolve) => {\n        // @TODO Fractal\n        // There's a chance the wallet's injected API is not ready as soon as DOM loads.\n        // Force delay web3Enable.\n        setTimeout(() => resolve(null), 1000)\n      })).then(() => {\n        web3Enable('Mock uID Provider').then((exts) => {\n          const meshExts = exts.filter(ext => ext.name === 'polywallet')\n          console.log('>>>> Extension', meshExts)\n\n          if (!meshExts.length) {\n            setError(new Error(`Please install Polymesh wallet extension from Chrome store`));\n            return;\n          }\n\n          const wallet = meshExts[0];\n          setPolyWallet(wallet);\n\n          // @ts-ignore\n          wallet.network.subscribe((network) => {\n            console.log('setNetwork', network.name)\n            setNetwork(network.name);\n          });\n\n          // @ts-ignore\n          wallet.network.get().then(network => setNetwork(network.name));\n\n          // @TODO Fractal\n          // Replace calls to web3AccountsSubscribe and web3Accounts with \n          // the following calls, respectively.\n          // Note that we cannot specify the ss58Format in this case, so we'll\n          // have to recode addresses before consumption.\n          web3AccountsSubscribe(_accounts);\n          web3Accounts().then(_accounts);\n        })\n      });\n    }\n  }, [polyWallet]);\n\n  useEffect(() => {\n    if (network) {\n      reset();\n\n      const url = networkURLs[network];\n      if (!url) {\n        setError(new Error(`Unknown network: ${network}`));\n      }\n\n\n      const apiPromise = new ApiPromise({\n        provider: new WsProvider(url),\n        types: schema.types,\n        rpc: schema.rpc,\n      });\n\n      apiPromise.isReady.then((api) => {\n        setApi(api);\n      });\n    }\n  }, [ network ])\n\n  useEffect(() => {\n    if (api && address) {\n      api.query.identity.keyToIdentityIds(address).then((linkedKeyInfo: any) => {\n        if (!linkedKeyInfo.isEmpty) {\n          setDid(linkedKeyInfo.toString());\n        }\n      })\n    }\n    \n  }, [ api, address ])\n\n  useEffect(() => {\n    if (!!address && !!network && polyWallet) {\n      polyWallet.uid.isSet().then((data: boolean) => {\n        setUidSet(data)\n      });\n    }\n  }, [address, network, polyWallet])\n\n  const generateProof = (polyWallet: any) => {\n    if (!ticker.length) {\n      setError(new Error('\"Ticker\" is required'), true);\n      return;\n    }\n    polyWallet.uid.requestProof({ticker })\n      .then((data: any) => {\n        console.log('Data', data);\n        setProof(data.proof);\n      }, setDisappearingError)\n      .catch(setDisappearingError);\n  }\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    setTicker(event.target.value);\n  }\n\n  const handleUidChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    setUid(event.target.value);\n  }\n\n  const provideUid = async (polyWallet: any, did: string, uid: string) => {\n    console.log('>>> uid', uid);\n\n    // @TODO Fractal\n    // Make sure to show any errors thrown by uid.provide.\n    polyWallet.uid.provide({\n      uid,\n      did,\n      network\n    }).then(console.log, setDisappearingError).catch(setDisappearingError);\n  }\n\n  const readUid = async (polyWallet: any) => {\n    polyWallet.uid.read()\n      .then((res: {uid: string, id: number}) => setImportedUid(res.uid), setDisappearingError)\n      .catch(setDisappearingError);\n  }\n\n  const provideUidFromDid = async (polyWallet: any, did: string) => {\n    console.log('Generating uID...');\n    const crypto = await import('@polymathnetwork/confidential-identity')\n    const mockUIdHex = `0x${crypto.process_create_mocked_investor_uid(did)}`;\n    const uid = uuidStringify(hexToU8a(mockUIdHex));\n\n    console.log('>>> uid', uid);\n\n    polyWallet.uid.provide({\n      uid,\n      did,\n      network\n    }).then(console.log, setDisappearingError).catch(setDisappearingError);\n  }\n\n  const isDev = network !== 'itn';\n\n  const Body = () => {\n    if (polyWallet && api) {\n      return (\n        <>\n          <p>\n            Network: {network || 'unknown'}\n          </p>\n          <p>\n            User address: {address || 'unknown'}\n          </p>\n          <p>\n            DID: {did || 'none'}\n          </p>\n          { uidSet !== undefined && <p>\n            UID: {uidSet ? 'true' : 'false'}\n          </p> }\n          {importedUid && <p>\n            UID value: {importedUid}\n          </p> }\n          { did && \n          <>\n            { isDev && <button  onClick={() => provideUidFromDid(polyWallet, did)}>\n                Generate a dummy uID and import it to Polymesh wallet\n              </button>\n            }\n            <p>\n              <button onClick={() => readUid(polyWallet)}>Read uId from wallet</button>\n\n            </p>\n\n            <p>\n              <input name='uid' value={uid} type='text' onChange={handleUidChange} />\n              <button onClick={() => provideUid(polyWallet, did, uid)}>Enter uID and import it to Polymesh wallet</button>\n            </p>\n            <p>\n              <input name='ticker' value={ticker} type='text' onChange={handleChange} />\n              <button onClick={() => generateProof(polyWallet)}>Use stored uID to generate proof</button>\n            </p>\n          </>\n          } <br />\n          { proof && <span>Proof: {JSON.stringify(proof, null, 3)} </span> }\n          { error && <span>{error.message}</span>}\n        </>\n      )\n    }\n    else if (error) {\n      return <span>{error.message}</span>\n    }\n    return <div>Initalizing API instance ...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Body />\n      </header>\n    </div> \n  );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}