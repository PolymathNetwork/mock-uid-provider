{"version":3,"sources":["schema.ts","constants.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["polymesh_schema","types","AccountInfo","Address","LookupSource","ValidatorPrefsWithBlocked","commission","IdentityId","EventDid","InvestorUid","Ticker","CddId","ScopeId","PosRatio","DocumentId","DocumentName","DocumentUri","DocumentHash","_enum","None","H512","H384","H320","H256","H224","H192","H160","H128","DocumentType","Document","uri","content_hash","name","doc_type","filing_date","Version","AssetType","EquityCommon","EquityPreferred","Commodity","FixedIncome","REIT","Fund","RevenueShareAgreement","StructuredProduct","Derivative","Custom","StableCoin","AssetIdentifier","CUSIP","CINS","ISIN","LEI","AssetOwnershipRelation","NotOwned","TickerOwned","AssetOwned","AssetName","FundingRoundName","VenueDetails","SecurityToken","total_supply","owner_did","divisible","asset_type","primary_issuance_agent","PalletName","DispatchableName","PalletPermissions","pallet_name","dispatchable_names","Permissions","asset","extrinsic","portfolio","LegacyPalletPermissions","total","LegacyPermissions","Signatory","Identity","Account","SecondaryKey","signer","permissions","SecondaryKeyWithAuth","secondary_key","auth_signature","IdentityRole","PreAuthorizedKeyInfo","target_id","DidRecord","primary_key","secondary_keys","KeyIdentityData","identity","CountryCode","Scope","InvestorZKProofData","Scalar","RistrettoPoint","ZkProofData","challenge_responses","subtract_expressions_res","blinded_scope_did_hash","ScopeClaimProof","proof_scope_id_wellformed","proof_scope_id_cdd_id_match","scope_id","Claim","Accredited","Affiliate","BuyLockup","SellLockup","CustomerDueDiligence","KnowYourCustomer","Jurisdiction","Exempted","Blocked","InvestorUniqueness","NoData","ClaimType","IdentityClaim","claim_issuer","issuance_date","last_update_date","expiry","claim","IdentityClaimKey","id","claim_type","ComplianceRequirement","sender_conditions","receiver_conditions","ComplianceRequirementResult","result","ConditionType","IsPresent","IsAbsent","IsAnyOf","IsNoneOf","IsIdentity","TrustedFor","Any","Specific","TrustedIssuer","issuer","trusted_for","Condition","condition_type","issuers","ConditionResult","condition","SimpleTokenRecord","ticker","FeeOf","TargetIdAuthorization","nonce","expires_at","TickerRegistration","owner","TickerRegistrationConfig","max_ticker_length","registration_length","ClassicTickerRegistration","eth_owner","is_created","ClassicTickerImport","is_contract","EthereumAddress","EcdsaSignature","MotionTitle","MotionInfoLink","ChoiceTitle","Motion","title","info_link","choices","BallotTitle","BallotMeta","motions","BallotTimeRange","start","end","BallotVote","power","fallback","MaybeBlock","Some","Url","PipDescription","PipsMetadata","url","description","created_at","transaction_version","Proposer","Community","Committee","Technical","Upgrade","SkippedCount","SnapshottedPip","weight","SnapshotId","SnapshotMetadata","made_by","SnapshotResult","Approve","Reject","Skip","Beneficiary","amount","DepositInfo","PolymeshVotes","index","ayes","nays","PipId","ProposalState","Pip","proposal","state","proposer","ProposalData","Hash","Proposal","TickerTransferApproval","authorized_by","next_ticker","previous_ticker","OffChainSignature","Ed25519","Sr25519","Ecdsa","Authorization","authorization_data","auth_id","AuthorizationData","AttestPrimaryKeyRotation","RotatePrimaryKey","TransferTicker","TransferPrimaryIssuanceAgent","AddMultiSigSigner","TransferAssetOwnership","JoinIdentity","PortfolioCustody","TransferCorporateActionAgent","AuthIdentifier","signatory","SmartExtensionType","TransferManager","Offerings","SmartWallet","SmartExtensionName","SmartExtension","extension_type","extension_name","extension_id","is_archive","MetaUrl","MetaDescription","MetaVersion","ExtVersion","TemplateMetadata","se_type","usage_fee","version","TemplateDetails","instantiation_fee","frozen","ProportionMatch","AuthorizationNonce","Counter","Percentage","CountTransferManager","PercentageTransferManager","RestrictionResult","Memo","IssueRecipient","BridgeTx","recipient","value","tx_hash","PendingTx","did","bridge_tx","AssetCompliance","is_paused","requirements","AssetComplianceResult","paused","Claim1stKey","target","Claim2ndKey","scope","BatchAddClaimItem","BatchRevokeClaimItem","InactiveMember","deactivated_at","VotingResult","ayes_count","ayes_stake","nays_count","nays_stake","ProtocolOp","CddStatus","Ok","Err","AssetDidResult","DidRecordsSuccess","DidRecords","Success","IdNotFound","VoteCountProposalFound","VoteCount","ProposalFound","ProposalNotFound","Vote","VoteByPip","pip","vote","HistoricalVotingByAddress","HistoricalVotingById","BridgeTxDetail","status","execution_block","BridgeTxStatus","Absent","Pending","Frozen","Timelocked","Handled","HandledTxStatus","Error","CappedFee","CanTransferResult","AuthorizationType","ProposalDetails","approvals","rejections","auto_close","ProposalStatus","Invalid","ActiveOrExpired","ExecutionSuccessful","ExecutionFailed","Rejected","DidStatus","Unknown","Exists","CddVerified","PortfolioName","PortfolioNumber","PortfolioKind","Default","User","PortfolioId","kind","ProverTickerKey","prover","TickerRangeProof","initial_message","final_response","max_two_exp","Moment","CalendarUnit","CalendarPeriod","unit","CheckpointSchedule","period","CheckpointId","ScheduleId","StoredSchedule","schedule","at","remaining","ScheduleSpec","InstructionStatus","LegStatus","PendingTokenLock","ExecutionPending","ExecutionToBeSkipped","AffirmationStatus","Affirmed","SettlementType","SettleOnAffirmation","SettleOnBlock","Instruction","instruction_id","venue_id","settlement_type","trade_date","value_date","Leg","from","to","Venue","creator","instructions","details","venue_type","Receipt","receipt_uid","ReceiptMetadata","ReceiptDetails","leg_id","signature","metadata","UniqueCall","call","MovePortfolioItem","WeightToFeeCoefficient","coeffInteger","coeffFrac","negative","degree","TargetIdentity","PrimaryIssuanceAgent","FundraiserName","FundraiserStatus","FundraiserTier","price","Fundraiser","offering_portfolio","offering_asset","raising_portfolio","raising_asset","tiers","minimum_investment","VenueType","Payload","block_number","nominators","public","ExtensionAttributes","Tax","TargetIdentities","identities","treatment","TargetTreatment","CAKind","CADetails","CACheckpoint","Scheduled","Existing","RecordDate","date","checkpoint","RecordDateSpec","ExistingSchedule","CorporateAction","decl_date","record_date","targets","default_withholding_tax","withholding_tax","LocalCAId","CAId","local_id","Distribution","currency","per_share","reclaimed","payment_at","SlashingSwitch","PriceTier","AssetMigrationError","AssetDocumentFail","MigrationError","DecodeKey","Map","PermissionedIdentityPrefs","intended_count","running_count","GranularCanTransferResult","invalid_granularity","self_transfer","invalid_receiver_cdd","invalid_sender_cdd","missing_scope_claim","receiver_custodian_error","sender_custodian_error","sender_insufficient_balance","portfolio_validity_result","asset_frozen","statistics_result","compliance_result","PortfolioValidityResult","receiver_is_same_portfolio","sender_portfolio_does_not_exist","receiver_portfolio_does_not_exist","TransferManagerResult","tm","BalanceAtResult","rpc","compliance","canTransfer","params","type","isOptional","isIdentityHasValidCdd","getAssetDid","getDidRecords","getDidStatus","getFilteredAuthorizations","getKeyIdentityData","pips","getVotes","proposedBy","votedOn","votingHistoryByAddress","votingHistoryById","protocolFee","computeFee","staking","getCurve","canTransferGranular","balanceAt","networkURLs","alcyone","pmf","pme","itn","App","useState","wallet","setWallet","network","setNetwork","account","setAccount","api","setApi","setDid","provideUidFromDid","a","crypto","mockUIdHex","process_create_mocked_investor_uid","uid","uuidStringify","hexToU8a","provide","catch","error","console","readUid","read","alert","useEffect","connectPolymeshWallet","web3Enable","extensions","polyWallet","find","extension","get","then","subscribe","getSelectedAccount","web3Accounts","accounts","length","web3AccountsSubscribe","undefined","ApiPromise","provider","WsProvider","isReady","query","keyToIdentityIds","address","codec","isEmpty","toString","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0d4d75c4.chunk.js","sourcesContent":["export const polymesh_schema = {\n  types: {\n    AccountInfo: 'AccountInfoWithRefCount',\n    Address: 'IndicesLookupSource',\n    LookupSource: 'IndicesLookupSource',\n    ValidatorPrefsWithBlocked: {\n      commission: 'Compact<Perbill>',\n    },\n    IdentityId: '[u8; 32]',\n    EventDid: 'IdentityId',\n    InvestorUid: '[u8; 16]',\n    Ticker: '[u8; 12]',\n    CddId: '[u8; 32]',\n    ScopeId: '[u8; 32]',\n    PosRatio: '(u32, u32)',\n    DocumentId: 'u32',\n    DocumentName: 'Text',\n    DocumentUri: 'Text',\n    DocumentHash: {\n      _enum: {\n        None: '',\n        H512: '[u8; 64]',\n        H384: '[u8; 48]',\n        H320: '[u8; 40]',\n        H256: '[u8; 32]',\n        H224: '[u8; 28]',\n        H192: '[u8; 24]',\n        H160: '[u8; 20]',\n        H128: '[u8; 16]',\n      },\n    },\n    DocumentType: 'Text',\n    Document: {\n      uri: 'DocumentUri',\n      content_hash: 'DocumentHash',\n      name: 'DocumentName',\n      doc_type: 'Option<DocumentType>',\n      filing_date: 'Option<Moment>',\n    },\n    Version: 'u8',\n    AssetType: {\n      _enum: {\n        EquityCommon: '',\n        EquityPreferred: '',\n        Commodity: '',\n        FixedIncome: '',\n        REIT: '',\n        Fund: '',\n        RevenueShareAgreement: '',\n        StructuredProduct: '',\n        Derivative: '',\n        Custom: 'Vec<u8>',\n        StableCoin: '',\n      },\n    },\n    AssetIdentifier: {\n      _enum: {\n        CUSIP: '[u8; 9]',\n        CINS: '[u8; 9]',\n        ISIN: '[u8; 12]',\n        LEI: '[u8; 20]',\n      },\n    },\n    AssetOwnershipRelation: {\n      _enum: {\n        NotOwned: '',\n        TickerOwned: '',\n        AssetOwned: '',\n      },\n    },\n    AssetName: 'Text',\n    FundingRoundName: 'Text',\n    VenueDetails: 'Text',\n    SecurityToken: {\n      name: 'AssetName',\n      total_supply: 'Balance',\n      owner_did: 'IdentityId',\n      divisible: 'bool',\n      asset_type: 'AssetType',\n      primary_issuance_agent: 'Option<IdentityId>',\n    },\n    PalletName: 'Text',\n    DispatchableName: 'Text',\n    PalletPermissions: {\n      pallet_name: 'PalletName',\n      dispatchable_names: 'Option<Vec<DispatchableName>>',\n    },\n    Permissions: {\n      asset: 'Option<Vec<Ticker>>',\n      extrinsic: 'Option<Vec<PalletPermissions>>',\n      portfolio: 'Option<Vec<PortfolioId>>',\n    },\n    LegacyPalletPermissions: {\n      pallet_name: 'PalletName',\n      total: 'bool',\n      dispatchable_names: 'Vec<DispatchableName>',\n    },\n    LegacyPermissions: {\n      asset: 'Option<Vec<Ticker>>',\n      extrinsic: 'Option<Vec<LegacyPalletPermissions>>',\n      portfolio: 'Option<Vec<PortfolioId>>',\n    },\n    Signatory: {\n      _enum: {\n        Identity: 'IdentityId',\n        Account: 'AccountId',\n      },\n    },\n    SecondaryKey: {\n      signer: 'Signatory',\n      permissions: 'Permissions',\n    },\n    SecondaryKeyWithAuth: {\n      secondary_key: 'SecondaryKey',\n      auth_signature: 'Signature',\n    },\n    IdentityRole: {\n      _enum: [\n        'Issuer',\n        'SimpleTokenIssuer',\n        'Validator',\n        'ClaimIssuer',\n        'Investor',\n        'NodeRunner',\n        'PM',\n        'CDDAMLClaimIssuer',\n        'AccreditedInvestorClaimIssuer',\n        'VerifiedIdentityClaimIssuer',\n      ],\n    },\n    PreAuthorizedKeyInfo: {\n      target_id: 'IdentityId',\n      secondary_key: 'SecondaryKey',\n    },\n    DidRecord: {\n      primary_key: 'AccountId',\n      secondary_keys: 'Vec<SecondaryKey>',\n    },\n    KeyIdentityData: {\n      identity: 'IdentityId',\n      permissions: 'Option<Permissions>',\n    },\n    CountryCode: {\n      _enum: [\n        'AF',\n        'AX',\n        'AL',\n        'DZ',\n        'AS',\n        'AD',\n        'AO',\n        'AI',\n        'AQ',\n        'AG',\n        'AR',\n        'AM',\n        'AW',\n        'AU',\n        'AT',\n        'AZ',\n        'BS',\n        'BH',\n        'BD',\n        'BB',\n        'BY',\n        'BE',\n        'BZ',\n        'BJ',\n        'BM',\n        'BT',\n        'BO',\n        'BA',\n        'BW',\n        'BV',\n        'BR',\n        'VG',\n        'IO',\n        'BN',\n        'BG',\n        'BF',\n        'BI',\n        'KH',\n        'CM',\n        'CA',\n        'CV',\n        'KY',\n        'CF',\n        'TD',\n        'CL',\n        'CN',\n        'HK',\n        'MO',\n        'CX',\n        'CC',\n        'CO',\n        'KM',\n        'CG',\n        'CD',\n        'CK',\n        'CR',\n        'CI',\n        'HR',\n        'CU',\n        'CY',\n        'CZ',\n        'DK',\n        'DJ',\n        'DM',\n        'DO',\n        'EC',\n        'EG',\n        'SV',\n        'GQ',\n        'ER',\n        'EE',\n        'ET',\n        'FK',\n        'FO',\n        'FJ',\n        'FI',\n        'FR',\n        'GF',\n        'PF',\n        'TF',\n        'GA',\n        'GM',\n        'GE',\n        'DE',\n        'GH',\n        'GI',\n        'GR',\n        'GL',\n        'GD',\n        'GP',\n        'GU',\n        'GT',\n        'GG',\n        'GN',\n        'GW',\n        'GY',\n        'HT',\n        'HM',\n        'VA',\n        'HN',\n        'HU',\n        'IS',\n        'IN',\n        'ID',\n        'IR',\n        'IQ',\n        'IE',\n        'IM',\n        'IL',\n        'IT',\n        'JM',\n        'JP',\n        'JE',\n        'JO',\n        'KZ',\n        'KE',\n        'KI',\n        'KP',\n        'KR',\n        'KW',\n        'KG',\n        'LA',\n        'LV',\n        'LB',\n        'LS',\n        'LR',\n        'LY',\n        'LI',\n        'LT',\n        'LU',\n        'MK',\n        'MG',\n        'MW',\n        'MY',\n        'MV',\n        'ML',\n        'MT',\n        'MH',\n        'MQ',\n        'MR',\n        'MU',\n        'YT',\n        'MX',\n        'FM',\n        'MD',\n        'MC',\n        'MN',\n        'ME',\n        'MS',\n        'MA',\n        'MZ',\n        'MM',\n        'NA',\n        'NR',\n        'NP',\n        'NL',\n        'AN',\n        'NC',\n        'NZ',\n        'NI',\n        'NE',\n        'NG',\n        'NU',\n        'NF',\n        'MP',\n        'NO',\n        'OM',\n        'PK',\n        'PW',\n        'PS',\n        'PA',\n        'PG',\n        'PY',\n        'PE',\n        'PH',\n        'PN',\n        'PL',\n        'PT',\n        'PR',\n        'QA',\n        'RE',\n        'RO',\n        'RU',\n        'RW',\n        'BL',\n        'SH',\n        'KN',\n        'LC',\n        'MF',\n        'PM',\n        'VC',\n        'WS',\n        'SM',\n        'ST',\n        'SA',\n        'SN',\n        'RS',\n        'SC',\n        'SL',\n        'SG',\n        'SK',\n        'SI',\n        'SB',\n        'SO',\n        'ZA',\n        'GS',\n        'SS',\n        'ES',\n        'LK',\n        'SD',\n        'SR',\n        'SJ',\n        'SZ',\n        'SE',\n        'CH',\n        'SY',\n        'TW',\n        'TJ',\n        'TZ',\n        'TH',\n        'TL',\n        'TG',\n        'TK',\n        'TO',\n        'TT',\n        'TN',\n        'TR',\n        'TM',\n        'TC',\n        'TV',\n        'UG',\n        'UA',\n        'AE',\n        'GB',\n        'US',\n        'UM',\n        'UY',\n        'UZ',\n        'VU',\n        'VE',\n        'VN',\n        'VI',\n        'WF',\n        'EH',\n        'YE',\n        'ZM',\n        'ZW',\n        'BQ',\n        'CW',\n        'SX',\n      ],\n    },\n    Scope: {\n      _enum: {\n        Identity: 'IdentityId',\n        Ticker: 'Ticker',\n        Custom: 'Vec<u8>',\n      },\n    },\n    InvestorZKProofData: 'Signature',\n    Scalar: '[u8; 32]',\n    RistrettoPoint: '[u8; 32]',\n    ZkProofData: {\n      challenge_responses: '[Scalar; 2]',\n      subtract_expressions_res: 'RistrettoPoint',\n      blinded_scope_did_hash: 'RistrettoPoint',\n    },\n    ScopeClaimProof: {\n      proof_scope_id_wellformed: 'Signature',\n      proof_scope_id_cdd_id_match: 'ZkProofData',\n      scope_id: 'RistrettoPoint',\n    },\n    Claim: {\n      _enum: {\n        Accredited: 'Scope',\n        Affiliate: 'Scope',\n        BuyLockup: 'Scope',\n        SellLockup: 'Scope',\n        CustomerDueDiligence: 'CddId',\n        KnowYourCustomer: 'Scope',\n        Jurisdiction: '(CountryCode, Scope)',\n        Exempted: 'Scope',\n        Blocked: 'Scope',\n        InvestorUniqueness: '(Scope, ScopeId, CddId)',\n        NoData: '',\n      },\n    },\n    ClaimType: {\n      _enum: {\n        Accredited: '',\n        Affiliate: '',\n        BuyLockup: '',\n        SellLockup: '',\n        CustomerDueDiligence: '',\n        KnowYourCustomer: '',\n        Jurisdiction: '',\n        Exempted: '',\n        Blocked: '',\n        InvestorUniqueness: '',\n        NoData: '',\n      },\n    },\n    IdentityClaim: {\n      claim_issuer: 'IdentityId',\n      issuance_date: 'Moment',\n      last_update_date: 'Moment',\n      expiry: 'Option<Moment>',\n      claim: 'Claim',\n    },\n    IdentityClaimKey: {\n      id: 'IdentityId',\n      claim_type: 'ClaimType',\n    },\n    ComplianceRequirement: {\n      sender_conditions: 'Vec<Condition>',\n      receiver_conditions: 'Vec<Condition>',\n      id: 'u32',\n    },\n    ComplianceRequirementResult: {\n      sender_conditions: 'Vec<ConditionResult>',\n      receiver_conditions: 'Vec<ConditionResult>',\n      id: 'u32',\n      result: 'bool',\n    },\n    ConditionType: {\n      _enum: {\n        IsPresent: 'Claim',\n        IsAbsent: 'Claim',\n        IsAnyOf: 'Vec<Claim>',\n        IsNoneOf: 'Vec<Claim>',\n        IsIdentity: 'TargetIdentity',\n      },\n    },\n    TrustedFor: {\n      _enum: {\n        Any: '',\n        Specific: 'Vec<ClaimType>',\n      },\n    },\n    TrustedIssuer: {\n      issuer: 'IdentityId',\n      trusted_for: 'TrustedFor',\n    },\n    Condition: {\n      condition_type: 'ConditionType',\n      issuers: 'Vec<TrustedIssuer>',\n    },\n    ConditionResult: {\n      condition: 'Condition',\n      result: 'bool',\n    },\n    SimpleTokenRecord: {\n      ticker: 'Ticker',\n      total_supply: 'Balance',\n      owner_did: 'IdentityId',\n    },\n    FeeOf: 'Balance',\n    TargetIdAuthorization: {\n      target_id: 'IdentityId',\n      nonce: 'u64',\n      expires_at: 'Moment',\n    },\n    TickerRegistration: {\n      owner: 'IdentityId',\n      expiry: 'Option<Moment>',\n    },\n    TickerRegistrationConfig: {\n      max_ticker_length: 'u8',\n      registration_length: 'Option<Moment>',\n    },\n    ClassicTickerRegistration: {\n      eth_owner: 'EthereumAddress',\n      is_created: 'bool',\n    },\n    ClassicTickerImport: {\n      eth_owner: 'EthereumAddress',\n      ticker: 'Ticker',\n      is_contract: 'bool',\n      is_created: 'bool',\n    },\n    EthereumAddress: '[u8; 20]',\n    EcdsaSignature: '[u8; 65]',\n    MotionTitle: 'Text',\n    MotionInfoLink: 'Text',\n    ChoiceTitle: 'Text',\n    Motion: {\n      title: 'MotionTitle',\n      info_link: 'MotionInfoLink',\n      choices: 'Vec<ChoiceTitle>',\n    },\n    BallotTitle: 'Text',\n    BallotMeta: {\n      title: 'BallotTitle',\n      motions: 'Vec<Motion>',\n    },\n    BallotTimeRange: {\n      start: 'Moment',\n      end: 'Moment',\n    },\n    BallotVote: {\n      power: 'Balance',\n      fallback: 'Option<u16>',\n    },\n    MaybeBlock: {\n      _enum: {\n        Some: 'BlockNumber',\n        None: '',\n      },\n    },\n    Url: 'Text',\n    PipDescription: 'Text',\n    PipsMetadata: {\n      id: 'PipId',\n      url: 'Option<Url>',\n      description: 'Option<PipDescription>',\n      created_at: 'BlockNumber',\n      transaction_version: 'u32',\n      expiry: 'MaybeBlock',\n    },\n    Proposer: {\n      _enum: {\n        Community: 'AccountId',\n        Committee: 'Committee',\n      },\n    },\n    Committee: {\n      _enum: {\n        Technical: '',\n        Upgrade: '',\n      },\n    },\n    SkippedCount: 'u8',\n    SnapshottedPip: {\n      id: 'PipId',\n      weight: '(bool, Balance)',\n    },\n    SnapshotId: 'u32',\n    SnapshotMetadata: {\n      created_at: 'BlockNumber',\n      made_by: 'AccountId',\n      id: 'SnapshotId',\n    },\n    SnapshotResult: {\n      _enum: {\n        Approve: '',\n        Reject: '',\n        Skip: '',\n      },\n    },\n    Beneficiary: {\n      id: 'IdentityId',\n      amount: 'Balance',\n    },\n    DepositInfo: {\n      owner: 'AccountId',\n      amount: 'Balance',\n    },\n    PolymeshVotes: {\n      index: 'u32',\n      ayes: 'Vec<(IdentityId, Balance)>',\n      nays: 'Vec<(IdentityId, Balance)>',\n      end: 'BlockNumber',\n      expiry: 'MaybeBlock',\n    },\n    PipId: 'u32',\n    ProposalState: {\n      _enum: [\n        'Pending',\n        'Rejected',\n        'Scheduled',\n        'Failed',\n        'Executed',\n        'Expired',\n      ],\n    },\n    Pip: {\n      id: 'PipId',\n      proposal: 'Call',\n      state: 'ProposalState',\n      proposer: 'Proposer',\n    },\n    ProposalData: {\n      _enum: {\n        Hash: 'Hash',\n        Proposal: 'Vec<u8>',\n      },\n    },\n    TickerTransferApproval: {\n      authorized_by: 'IdentityId',\n      next_ticker: 'Option<Ticker>',\n      previous_ticker: 'Option<Ticker>',\n    },\n    OffChainSignature: {\n      _enum: {\n        Ed25519: 'H512',\n        Sr25519: 'H512',\n        Ecdsa: 'H512',\n      },\n    },\n    Authorization: {\n      authorization_data: 'AuthorizationData',\n      authorized_by: 'IdentityId',\n      expiry: 'Option<Moment>',\n      auth_id: 'u64',\n    },\n    AuthorizationData: {\n      _enum: {\n        AttestPrimaryKeyRotation: 'IdentityId',\n        RotatePrimaryKey: 'IdentityId',\n        TransferTicker: 'Ticker',\n        TransferPrimaryIssuanceAgent: 'Ticker',\n        AddMultiSigSigner: 'AccountId',\n        TransferAssetOwnership: 'Ticker',\n        JoinIdentity: 'Permissions',\n        PortfolioCustody: 'PortfolioId',\n        Custom: 'Ticker',\n        NoData: '',\n        TransferCorporateActionAgent: 'Ticker',\n      },\n    },\n    AuthIdentifier: {\n      signatory: 'Signatory',\n      auth_id: 'u64',\n    },\n    SmartExtensionType: {\n      _enum: {\n        TransferManager: '',\n        Offerings: '',\n        SmartWallet: '',\n        Custom: 'Vec<u8>',\n      },\n    },\n    SmartExtensionName: 'Text',\n    SmartExtension: {\n      extension_type: 'SmartExtensionType',\n      extension_name: 'SmartExtensionName',\n      extension_id: 'AccountId',\n      is_archive: 'bool',\n    },\n    MetaUrl: 'Text',\n    MetaDescription: 'Text',\n    MetaVersion: 'u32',\n    ExtVersion: 'u32',\n    TemplateMetadata: {\n      url: 'Option<MetaUrl>',\n      se_type: 'SmartExtensionType',\n      usage_fee: 'Balance',\n      description: 'MetaDescription',\n      version: 'MetaVersion',\n    },\n    TemplateDetails: {\n      instantiation_fee: 'Balance',\n      owner: 'IdentityId',\n      frozen: 'bool',\n    },\n    ProportionMatch: {\n      _enum: ['AtLeast', 'MoreThan'],\n    },\n    AuthorizationNonce: 'u64',\n    Counter: 'u64',\n    Percentage: 'Permill',\n    TransferManager: {\n      _enum: {\n        CountTransferManager: 'Counter',\n        PercentageTransferManager: 'Percentage',\n      },\n    },\n    RestrictionResult: {\n      _enum: ['Valid', 'Invalid', 'ForceValid'],\n    },\n    Memo: '[u8;32]',\n    IssueRecipient: {\n      _enum: {\n        Account: 'AccountId',\n        Identity: 'IdentityId',\n      },\n    },\n    BridgeTx: {\n      nonce: 'u32',\n      recipient: 'AccountId',\n      value: 'Balance',\n      tx_hash: 'H256',\n    },\n    PendingTx: {\n      did: 'IdentityId',\n      bridge_tx: 'BridgeTx',\n    },\n    AssetCompliance: {\n      is_paused: 'bool',\n      requirements: 'Vec<ComplianceRequirement>',\n    },\n    AssetComplianceResult: {\n      paused: 'bool',\n      requirements: 'Vec<ComplianceRequirementResult>',\n      result: 'bool',\n    },\n    Claim1stKey: {\n      target: 'IdentityId',\n      claim_type: 'ClaimType',\n    },\n    Claim2ndKey: {\n      issuer: 'IdentityId',\n      scope: 'Option<Scope>',\n    },\n    BatchAddClaimItem: {\n      target: 'IdentityId',\n      claim: 'Claim',\n      expiry: 'Option<Moment>',\n    },\n    BatchRevokeClaimItem: {\n      target: 'IdentityId',\n      claim: 'Claim',\n    },\n    InactiveMember: {\n      id: 'IdentityId',\n      deactivated_at: 'Moment',\n      expiry: 'Option<Moment>',\n    },\n    VotingResult: {\n      ayes_count: 'u32',\n      ayes_stake: 'Balance',\n      nays_count: 'u32',\n      nays_stake: 'Balance',\n    },\n    ProtocolOp: {\n      _enum: [\n        'AssetRegisterTicker',\n        'AssetIssue',\n        'AssetAddDocument',\n        'AssetCreateAsset',\n        'AssetCreateCheckpointSchedule',\n        'DividendNew',\n        'ComplianceManagerAddComplianceRequirement',\n        'IdentityRegisterDid',\n        'IdentityCddRegisterDid',\n        'IdentityAddClaim',\n        'IdentitySetPrimaryKey',\n        'IdentityAddSecondaryKeysWithAuthorization',\n        'PipsPropose',\n        'VotingAddBallot',\n        'ContractsPutCode',\n        'BallotAttachBallot',\n        'DistributionDistribute',\n      ],\n    },\n    CddStatus: {\n      _enum: {\n        Ok: 'IdentityId',\n        Err: 'Vec<u8>',\n      },\n    },\n    AssetDidResult: {\n      _enum: {\n        Ok: 'IdentityId',\n        Err: 'Vec<u8>',\n      },\n    },\n    DidRecordsSuccess: {\n      primary_key: 'AccountId',\n      secondary_key: 'Vec<SecondaryKey>',\n    },\n    DidRecords: {\n      _enum: {\n        Success: 'DidRecordsSuccess',\n        IdNotFound: 'Vec<u8>',\n      },\n    },\n    VoteCountProposalFound: {\n      ayes: 'u64',\n      nays: 'u64',\n    },\n    VoteCount: {\n      _enum: {\n        ProposalFound: 'VoteCountProposalFound',\n        ProposalNotFound: 'Vec<u8>',\n      },\n    },\n    Vote: '(bool, Balance)',\n    VoteByPip: {\n      pip: 'PipId',\n      vote: 'Vote',\n    },\n    HistoricalVotingByAddress: 'Vec<VoteByPip>',\n    HistoricalVotingById: 'Vec<(AccountId, HistoricalVotingByAddress)>',\n    BridgeTxDetail: {\n      amount: 'Balance',\n      status: 'BridgeTxStatus',\n      execution_block: 'BlockNumber',\n      tx_hash: 'H256',\n    },\n    BridgeTxStatus: {\n      _enum: {\n        Absent: '',\n        Pending: 'u8',\n        Frozen: '',\n        Timelocked: '',\n        Handled: '',\n      },\n    },\n    HandledTxStatus: {\n      _enum: {\n        Success: '',\n        Error: 'Text',\n      },\n    },\n    CappedFee: 'u64',\n    CanTransferResult: {\n      _enum: {\n        Ok: 'u8',\n        Err: 'Vec<u8>',\n      },\n    },\n    AuthorizationType: {\n      _enum: {\n        AttestPrimaryKeyRotation: '',\n        RotatePrimaryKey: '',\n        TransferTicker: '',\n        TransferPrimaryIssuanceAgent: '',\n        AddMultiSigSigner: '',\n        TransferAssetOwnership: '',\n        JoinIdentity: '',\n        PortfolioCustody: '',\n        Custom: '',\n        NoData: '',\n        TransferCorporateActionAgent: '',\n      },\n    },\n    ProposalDetails: {\n      approvals: 'u64',\n      rejections: 'u64',\n      status: 'ProposalStatus',\n      expiry: 'Option<Moment>',\n      auto_close: 'bool',\n    },\n    ProposalStatus: {\n      _enum: {\n        Invalid: '',\n        ActiveOrExpired: '',\n        ExecutionSuccessful: '',\n        ExecutionFailed: '',\n        Rejected: '',\n      },\n    },\n    DidStatus: {\n      _enum: {\n        Unknown: '',\n        Exists: '',\n        CddVerified: '',\n      },\n    },\n    PortfolioName: 'Text',\n    PortfolioNumber: 'u64',\n    PortfolioKind: {\n      _enum: {\n        Default: '',\n        User: 'PortfolioNumber',\n      },\n    },\n    PortfolioId: {\n      did: 'IdentityId',\n      kind: 'PortfolioKind',\n    },\n    ProverTickerKey: {\n      prover: 'IdentityId',\n      ticker: 'Ticker',\n    },\n    TickerRangeProof: {\n      initial_message: '[u8; 32]',\n      final_response: 'Vec<u8>',\n      max_two_exp: 'u32',\n    },\n    Moment: 'u64',\n    CalendarUnit: {\n      _enum: ['Second', 'Minute', 'Hour', 'Day', 'Week', 'Month', 'Year'],\n    },\n    CalendarPeriod: {\n      unit: 'CalendarUnit',\n      amount: 'u64',\n    },\n    CheckpointSchedule: {\n      start: 'Moment',\n      period: 'CalendarPeriod',\n    },\n    CheckpointId: 'u64',\n    ScheduleId: 'u64',\n    StoredSchedule: {\n      schedule: 'CheckpointSchedule',\n      id: 'ScheduleId',\n      at: 'Moment',\n      remaining: 'u32',\n    },\n    ScheduleSpec: {\n      start: 'Option<Moment>',\n      period: 'CalendarPeriod',\n      remaining: 'u32',\n    },\n    InstructionStatus: {\n      _enum: {\n        Unknown: '',\n        Pending: '',\n      },\n    },\n    LegStatus: {\n      _enum: {\n        PendingTokenLock: '',\n        ExecutionPending: '',\n        ExecutionToBeSkipped: '(AccountId, u64)',\n      },\n    },\n    AffirmationStatus: {\n      _enum: {\n        Unknown: '',\n        Pending: '',\n        Affirmed: '',\n        Rejected: '',\n      },\n    },\n    SettlementType: {\n      _enum: {\n        SettleOnAffirmation: '',\n        SettleOnBlock: 'BlockNumber',\n      },\n    },\n    Instruction: {\n      instruction_id: 'u64',\n      venue_id: 'u64',\n      status: 'InstructionStatus',\n      settlement_type: 'SettlementType',\n      created_at: 'Option<Moment>',\n      trade_date: 'Option<Moment>',\n      value_date: 'Option<Moment>',\n    },\n    Leg: {\n      from: 'PortfolioId',\n      to: 'PortfolioId',\n      asset: 'Ticker',\n      amount: 'Balance',\n    },\n    Venue: {\n      creator: 'IdentityId',\n      instructions: 'Vec<u64>',\n      details: 'VenueDetails',\n      venue_type: 'VenueType',\n    },\n    Receipt: {\n      receipt_uid: 'u64',\n      from: 'PortfolioId',\n      to: 'PortfolioId',\n      asset: 'Ticker',\n      amount: 'Balance',\n    },\n    ReceiptMetadata: 'Text',\n    ReceiptDetails: {\n      receipt_uid: 'u64',\n      leg_id: 'u64',\n      signer: 'AccountId',\n      signature: 'OffChainSignature',\n      metadata: 'ReceiptMetadata',\n    },\n    UniqueCall: {\n      nonce: 'u64',\n      call: 'Call',\n    },\n    MovePortfolioItem: {\n      ticker: 'Ticker',\n      amount: 'Balance',\n    },\n    WeightToFeeCoefficient: {\n      coeffInteger: 'Balance',\n      coeffFrac: 'Perbill',\n      negative: 'bool',\n      degree: 'u8',\n    },\n    TargetIdentity: {\n      _enum: {\n        PrimaryIssuanceAgent: '',\n        Specific: 'IdentityId',\n      },\n    },\n    FundraiserName: 'Text',\n    FundraiserStatus: {\n      _enum: ['Live', 'Frozen', 'Closed', 'ClosedEarly'],\n    },\n    FundraiserTier: {\n      total: 'Balance',\n      price: 'Balance',\n      remaining: 'Balance',\n    },\n    Fundraiser: {\n      creator: 'IdentityId',\n      offering_portfolio: 'PortfolioId',\n      offering_asset: 'Ticker',\n      raising_portfolio: 'PortfolioId',\n      raising_asset: 'Ticker',\n      tiers: 'Vec<FundraiserTier>',\n      venue_id: 'u64',\n      start: 'Moment',\n      end: 'Option<Moment>',\n      status: 'FundraiserStatus',\n      minimum_investment: 'Balance',\n    },\n    VenueType: {\n      _enum: ['Other', 'Distribution', 'Sto', 'Exchange'],\n    },\n    Payload: {\n      block_number: 'BlockNumber',\n      nominators: 'Vec<AccountId>',\n      public: 'H256',\n    },\n    ExtensionAttributes: {\n      usage_fee: 'Balance',\n      version: 'MetaVersion',\n    },\n    Tax: 'Permill',\n    TargetIdentities: {\n      identities: 'Vec<IdentityId>',\n      treatment: 'TargetTreatment',\n    },\n    TargetTreatment: {\n      _enum: ['Include', 'Exclude'],\n    },\n    CAKind: {\n      _enum: [\n        'PredictableBenefit',\n        'UnpredictableBenefit',\n        'IssuerNotice',\n        'Reorganization',\n        'Other',\n      ],\n    },\n    CADetails: 'Text',\n    CACheckpoint: {\n      _enum: {\n        Scheduled: '(ScheduleId, u64)',\n        Existing: 'CheckpointId',\n      },\n    },\n    RecordDate: {\n      date: 'Moment',\n      checkpoint: 'CACheckpoint',\n    },\n    RecordDateSpec: {\n      _enum: {\n        Scheduled: 'Moment',\n        ExistingSchedule: 'ScheduleId',\n        Existing: 'CheckpointId',\n      },\n    },\n    CorporateAction: {\n      kind: 'CAKind',\n      decl_date: 'Moment',\n      record_date: 'Option<RecordDate>',\n      details: 'Text',\n      targets: 'TargetIdentities',\n      default_withholding_tax: 'Tax',\n      withholding_tax: 'Vec<(IdentityId, Tax)>',\n    },\n    LocalCAId: 'u32',\n    CAId: {\n      ticker: 'Ticker',\n      local_id: 'LocalCAId',\n    },\n    Distribution: {\n      from: 'PortfolioId',\n      currency: 'Ticker',\n      per_share: 'Balance',\n      amount: 'Balance',\n      remaining: 'Balance',\n      reclaimed: 'bool',\n      payment_at: 'Moment',\n      expires_at: 'Option<Moment>',\n    },\n    SlashingSwitch: {\n      _enum: ['Validator', 'ValidatorAndNominator', 'None'],\n    },\n    PriceTier: {\n      total: 'Balance',\n      price: 'Balance',\n    },\n    AssetMigrationError: {\n      _enum: {\n        AssetDocumentFail: '(Ticker, DocumentId)',\n      },\n    },\n    MigrationError: {\n      _enum: {\n        DecodeKey: 'Vec<u8>',\n        Map: 'AssetMigrationError',\n      },\n    },\n    PermissionedIdentityPrefs: {\n      intended_count: 'u32',\n      running_count: 'u32',\n    },\n    GranularCanTransferResult: {\n      invalid_granularity: 'bool',\n      self_transfer: 'bool',\n      invalid_receiver_cdd: 'bool',\n      invalid_sender_cdd: 'bool',\n      missing_scope_claim: 'bool',\n      receiver_custodian_error: 'bool',\n      sender_custodian_error: 'bool',\n      sender_insufficient_balance: 'bool',\n      portfolio_validity_result: 'PortfolioValidityResult',\n      asset_frozen: 'bool',\n      statistics_result: 'Vec<TransferManagerResult>',\n      compliance_result: 'AssetComplianceResult',\n      result: 'bool',\n    },\n    PortfolioValidityResult: {\n      receiver_is_same_portfolio: 'bool',\n      sender_portfolio_does_not_exist: 'bool',\n      receiver_portfolio_does_not_exist: 'bool',\n      sender_insufficient_balance: 'bool',\n      result: 'bool',\n    },\n    TransferManagerResult: {\n      tm: 'TransferManager',\n      result: 'bool',\n    },\n    BalanceAtResult: {\n      _enum: {\n        Ok: 'Vec<Balance>',\n        Err: 'Vec<u8>',\n      },\n    },\n  },\n  rpc: {\n    compliance: {\n      canTransfer: {\n        description:\n          'Checks whether a transaction with given parameters is compliant to the compliance manager conditions',\n        params: [\n          {\n            name: 'ticker',\n            type: 'Ticker',\n            isOptional: false,\n          },\n          {\n            name: 'from_did',\n            type: 'Option<IdentityId>',\n            isOptional: false,\n          },\n          {\n            name: 'to_did',\n            type: 'Option<IdentityId>',\n            isOptional: false,\n          },\n          {\n            name: 'blockHash',\n            type: 'Hash',\n            isOptional: true,\n          },\n        ],\n        type: 'AssetComplianceResult',\n      },\n    },\n    identity: {\n      isIdentityHasValidCdd: {\n        description:\n          'use to tell whether the given did has valid cdd claim or not',\n        params: [\n          {\n            name: 'did',\n            type: 'IdentityId',\n            isOptional: false,\n          },\n          {\n            name: 'buffer_time',\n            type: 'u64',\n            isOptional: true,\n          },\n          {\n            name: 'blockHash',\n            type: 'Hash',\n            isOptional: true,\n          },\n        ],\n        type: 'CddStatus',\n      },\n      getAssetDid: {\n        description: 'function is used to query the given ticker DID',\n        params: [\n          {\n            name: 'ticker',\n            type: 'Ticker',\n            isOptional: false,\n          },\n          {\n            name: 'blockHash',\n            type: 'Hash',\n            isOptional: true,\n          },\n        ],\n        type: 'AssetDidResult',\n      },\n      getDidRecords: {\n        description: 'Used to get the did record values for a given DID',\n        params: [\n          {\n            name: 'did',\n            type: 'IdentityId',\n            isOptional: false,\n          },\n          {\n            name: 'blockHash',\n            type: 'Hash',\n            isOptional: true,\n          },\n        ],\n        type: 'DidRecords',\n      },\n      getDidStatus: {\n        description: 'Retrieve status of the DID',\n        params: [\n          {\n            name: 'did',\n            type: 'Vec<IdentityId>',\n            isOptional: false,\n          },\n          {\n            name: 'blockHash',\n            type: 'Hash',\n            isOptional: true,\n          },\n        ],\n        type: 'Vec<DidStatus>',\n      },\n      getFilteredAuthorizations: {\n        description:\n          'Retrieve authorizations data for a given signatory and filtered using the given authorization type',\n        params: [\n          {\n            name: 'signatory',\n            type: 'Signatory',\n            isOptional: false,\n          },\n          {\n            name: 'allow_expired',\n            type: 'bool',\n            isOptional: false,\n          },\n          {\n            name: 'auth_type',\n            type: 'AuthorizationType',\n            isOptional: true,\n          },\n          {\n            name: 'blockHash',\n            type: 'Hash',\n            isOptional: true,\n          },\n        ],\n        type: 'Vec<Authorization>',\n      },\n      getKeyIdentityData: {\n        description: 'Query relation between a signing key and a DID',\n        params: [\n          {\n            name: 'acc',\n            type: 'AccountId',\n            isOptional: false,\n          },\n          {\n            name: 'blockHash',\n            type: 'Hash',\n            isOptional: true,\n          },\n        ],\n        type: 'Option<KeyIdentityData<IdentityId>>',\n      },\n    },\n    pips: {\n      getVotes: {\n        description: 'Summary of votes of a proposal given by index',\n        params: [\n          {\n            name: 'index',\n            type: 'u32',\n            isOptional: false,\n          },\n          {\n            name: 'blockHash',\n            type: 'Hash',\n            isOptional: true,\n          },\n        ],\n        type: 'VoteCount',\n      },\n      proposedBy: {\n        description: 'Retrieves proposal indices started by address',\n        params: [\n          {\n            name: 'address',\n            type: 'AccountId',\n            isOptional: false,\n          },\n          {\n            name: 'blockHash',\n            type: 'Hash',\n            isOptional: true,\n          },\n        ],\n        type: 'Vec<u32>',\n      },\n      votedOn: {\n        description: 'Retrieves proposal address indices voted on',\n        params: [\n          {\n            name: 'address',\n            type: 'AccountId',\n            isOptional: false,\n          },\n          {\n            name: 'blockHash',\n            type: 'Hash',\n            isOptional: true,\n          },\n        ],\n        type: 'Vec<u32>',\n      },\n      votingHistoryByAddress: {\n        description: 'Retrieves proposal `address` indices voted on',\n        params: [\n          {\n            name: 'address',\n            type: 'AccountId',\n            isOptional: false,\n          },\n          {\n            name: 'blockHash',\n            type: 'Hash',\n            isOptional: true,\n          },\n        ],\n        type: 'HistoricalVotingByAddress',\n      },\n      votingHistoryById: {\n        description: 'Retrieve historical voting of `id` identity',\n        params: [\n          {\n            name: 'id',\n            type: 'IdentityId',\n            isOptional: false,\n          },\n          {\n            name: 'blockHash',\n            type: 'Hash',\n            isOptional: true,\n          },\n        ],\n        type: 'HistoricalVotingById',\n      },\n    },\n    protocolFee: {\n      computeFee: {\n        description: 'Gets the fee of a chargeable extrinsic operation',\n        params: [\n          {\n            name: 'op',\n            type: 'ProtocolOp',\n            isOptional: false,\n          },\n          {\n            name: 'blockHash',\n            type: 'Hash',\n            isOptional: true,\n          },\n        ],\n        type: 'CappedFee',\n      },\n    },\n    staking: {\n      getCurve: {\n        description: 'Retrieves curves parameters',\n        params: [\n          {\n            name: 'blockHash',\n            type: 'Hash',\n            isOptional: true,\n          },\n        ],\n        type: 'Vec<(Perbill, Perbill)>',\n      },\n    },\n    asset: {\n      canTransfer: {\n        description:\n          'Checks whether a transaction with given parameters can take place or not',\n        params: [\n          {\n            name: 'sender',\n            type: 'AccountId',\n            isOptional: false,\n          },\n          {\n            name: 'from_custodian',\n            type: 'Option<IdentityId>',\n            isOptional: false,\n          },\n          {\n            name: 'from_portfolio',\n            type: 'PortfolioId',\n            isOptional: false,\n          },\n          {\n            name: 'to_custodian',\n            type: 'Option<IdentityId>',\n            isOptional: false,\n          },\n          {\n            name: 'to_portfolio',\n            type: 'PortfolioId',\n            isOptional: false,\n          },\n          {\n            name: 'ticker',\n            type: 'Ticker',\n            isOptional: false,\n          },\n          {\n            name: 'value',\n            type: 'Balance',\n            isOptional: false,\n          },\n          {\n            name: 'blockHash',\n            type: 'Hash',\n            isOptional: true,\n          },\n        ],\n        type: 'CanTransferResult',\n      },\n      canTransferGranular: {\n        description:\n          'Checks whether a transaction with given parameters can take place or not. The result is granular meaning each check is run and returned regardless of outcome.',\n        params: [\n          {\n            name: 'from_custodian',\n            type: 'Option<IdentityId>',\n            isOptional: false,\n          },\n          {\n            name: 'from_portfolio',\n            type: 'PortfolioId',\n            isOptional: false,\n          },\n          {\n            name: 'to_custodian',\n            type: 'Option<IdentityId>',\n            isOptional: false,\n          },\n          {\n            name: 'to_portfolio',\n            type: 'PortfolioId',\n            isOptional: false,\n          },\n          {\n            name: 'ticker',\n            type: 'Ticker',\n            isOptional: false,\n          },\n          {\n            name: 'value',\n            type: 'Balance',\n            isOptional: false,\n          },\n          {\n            name: 'blockHash',\n            type: 'Hash',\n            isOptional: true,\n          },\n        ],\n        type: 'GranularCanTransferResult',\n      },\n      balanceAt: {\n        description:\n          'Returns the ticker balances of identities at a checkpoint.',\n        params: [\n          {\n            name: 'ticker',\n            type: 'Ticker',\n            isOptional: false,\n          },\n          {\n            name: 'checkpoint',\n            type: 'CheckpointId',\n            isOptional: false,\n          },\n          {\n            name: 'dids',\n            type: 'Vec<IdentityId>',\n            isOptional: false,\n          },\n        ],\n        type: 'BalanceAtResult',\n      },\n    },\n  },\n};\n","export const networkURLs: Record<string, string> = {\n  alcyone: 'wss://alcyone-rpc.polymesh.live',\n  pmf: 'wss://pmf.polymath.network',\n  pme: 'wss://pme.polymath.network',\n  itn: 'wss://itn-rpc.polymesh.live',\n};\n","import { useState, useEffect } from 'react';\nimport {\n  InjectedAccountWithMeta,\n  InjectedExtension,\n} from '@polkadot/extension-inject/types';\nimport { createApi } from './api';\nimport { NetworkMeta } from './types';\nimport {\n  web3Accounts,\n  web3AccountsSubscribe,\n  web3Enable,\n} from '@polkadot/extension-dapp';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { Codec } from '@polkadot/types/types';\nimport { hexToU8a } from '@polkadot/util';\nimport { stringify as uuidStringify } from 'uuid';\nimport { polymesh_schema } from './schema';\nimport { networkURLs } from './constants';\n\nexport function App() {\n  const [wallet, setWallet] = useState<InjectedExtension>();\n  const [network, setNetwork] = useState<NetworkMeta>();\n  const [account, setAccount] = useState<InjectedAccountWithMeta>();\n  const [api, setApi] = useState<ApiPromise>();\n  const [did, setDid] = useState<string>();\n\n  const provideUidFromDid = async () => {\n    if (!wallet || !did) return;\n\n    // console.log('Generating uID...');\n\n    const crypto = await import('@polymathnetwork/confidential-identity');\n    const mockUIdHex = `0x${crypto.process_create_mocked_investor_uid(did)}`;\n    const uid = uuidStringify(hexToU8a(mockUIdHex));\n\n    // console.log('>>> uid', uid);\n\n    // @ts-ignore\n    wallet.uid\n      .provide({\n        uid,\n        did,\n        network,\n      })\n      .catch((error: any) => {\n        console.error(error);\n      });\n  };\n\n  const readUid = async () => {\n    // @ts-ignore\n    const { uid } = await wallet.uid.read().catch((error) => {\n      console.error(error);\n    });\n\n    alert(uid ? uid : 'uID not found');\n  };\n\n  // Connect Polymesh wallet and set account on mount\n  useEffect(() => {\n    const connectPolymeshWallet = async () => {\n      const extensions = await web3Enable('Mock uID Provider');\n      const polyWallet = extensions.find(\n        (extension) => extension.name === 'polywallet'\n      );\n\n      if (!polyWallet) throw new Error('Polymesh wallet not found');\n\n      setWallet(polyWallet);\n\n      // @ts-ignore\n      polyWallet.network.get().then((network) => setNetwork(network));\n      // @ts-ignore\n      polyWallet.network.subscribe((network) => setNetwork(network));\n    };\n\n    const getSelectedAccount = async () => {\n      const accounts = await web3Accounts();\n\n      if (accounts.length === 0)\n        throw new Error('No accounts found in Polymesh wallet');\n\n      setAccount(accounts[0]);\n\n      web3AccountsSubscribe((accounts) => {\n        if (accounts.length) setAccount(accounts[0]);\n      });\n    };\n\n    connectPolymeshWallet().then(getSelectedAccount);\n  }, []);\n\n  // Initialize Polkadot API on network changes\n  useEffect(() => {\n    if (!network) return;\n\n    setApi(undefined);\n    setDid(undefined);\n\n    const apiPromise = new ApiPromise({\n      provider: new WsProvider(networkURLs[network.name]),\n      types: polymesh_schema.types,\n      rpc: polymesh_schema.rpc,\n    });\n\n    apiPromise.isReady.then((api) => setApi(api));\n  }, [network]);\n\n  // Set DID\n  useEffect(() => {\n    if (!api || !account) return;\n\n    api.query.identity\n      .keyToIdentityIds(account.address)\n      .then((value: unknown) => {\n        const codec = value as Codec;\n\n        setDid(codec.isEmpty ? undefined : codec.toString());\n      });\n  }, [api, account]);\n\n  return api && network && account ? (\n    <>\n      <h2>network: {network.name}</h2>\n      <h2>address: {account.address}</h2>\n      <h2>DID: {did}</h2>\n\n      {network.name !== 'itn' && (\n        <button onClick={provideUidFromDid}>\n          Generate a dummy uID and import it to Polymesh wallet\n        </button>\n      )}\n\n      <button onClick={readUid}>Read uID from Polymesh wallet</button>\n    </>\n  ) : (\n    <h1>Loading...</h1>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}